import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:window_manager/window_manager.dart';\nimport '../view_component/spotlight_task_creator.dart';\nimport '../services/global_hotkey_service.dart';\n\nclass SpotlightOverlayWindow extends ConsumerStatefulWidget {\n  const SpotlightOverlayWindow({super.key});\n\n  @override\n  ConsumerState<SpotlightOverlayWindow> createState() => _SpotlightOverlayWindowState();\n}\n\nclass _SpotlightOverlayWindowState extends ConsumerState<SpotlightOverlayWindow> {\n  bool _isVisible = false;\n  \n  @override\n  void initState() {\n    super.initState();\n    \n    // 전역 단축키 서비스 스트림 구독\n    final hotkeyService = ref.read(globalHotkeyServiceProvider);\n    hotkeyService.showOverlayStream.listen((show) {\n      if (mounted) {\n        setState(() {\n          _isVisible = show;\n        });\n        \n        if (show) {\n          _showWindow();\n        } else {\n          _hideWindow();\n        }\n      }\n    });\n  }\n  \n  Future<void> _showWindow() async {\n    // 창을 포커스하고 맨 앞으로 가져오기\n    await windowManager.show();\n    await windowManager.focus();\n    await windowManager.setAlwaysOnTop(true);\n  }\n  \n  Future<void> _hideWindow() async {\n    // 창 숨기기\n    await windowManager.hide();\n  }\n  \n  void _closeOverlay() {\n    final hotkeyService = ref.read(globalHotkeyServiceProvider);\n    hotkeyService.hideOverlay();\n  }\n  \n  @override\n  Widget build(BuildContext context) {\n    if (!_isVisible) {\n      return const SizedBox.shrink();\n    }\n    \n    return Scaffold(\n      backgroundColor: Colors.transparent,\n      body: SpotlightTaskCreator(\n        onClose: _closeOverlay,\n      ),\n    );\n  }\n}\n